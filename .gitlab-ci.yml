stages:
  - prep
  - build
  - upload
  - release

get-gotify-data:
  stage: prep
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - unprivileged
  image: alpine
  before_script:
    - apk add --no-cache curl jq
  script:
    - export GOTIFY_VERSION=$(curl -s https://api.github.com/repos/gotify/server/releases/latest | jq -r .tag_name)
    - export GO_VERSION=$(curl -s curl -s https://raw.githubusercontent.com/gotify/server/${GOTIFY_VERSION}/GO_VERSION)
    - echo -e "GOTIFY_VERSION=$GOTIFY_VERSION\nGO_VERSION=$GO_VERSION" > build.env
    # just for debugging
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env

build-plugin:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - docker
    - real-dind
  image: docker:cli
  needs:
    - job: get-gotify-data
      artifacts: true
  before_script:
    - apk add --no-cache go make
  script:
    # just for debugging
    - echo $GOTIFY_VERSION
    - echo $GO_VERSION
    # actual build
    - make download-tools GOTIFY_VERSION=$GOTIFY_VERSION
    - make build GOTIFY_VERSION=$GOTIFY_VERSION
  artifacts:
    when: on_success
    expire_in: 1 day
    paths:
      - build

push-plugin:
  stage: upload
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: get-gotify-data
      artifacts: true
    - job: build-plugin
      artifacts: true
  image: curlimages/curl
  script:
    # just for debugging
    - echo $GOTIFY_VERSION
    - echo $GO_VERSION
    # check if upload already exists
    - 'if curl --head --output /dev/null --fail "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-amd64.so"; then echo "Package already exists!"; false; else true; fi'
    # upload
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/gotify-webhooks-linux-amd64.so "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-amd64.so"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/gotify-webhooks-linux-arm-7.so "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-arm-7.so"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/gotify-webhooks-linux-arm64.so "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-arm64.so"'

release-plugin:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: get-gotify-data
      artifacts: true
    - job: build-plugin
      artifacts: true
    - job: push-plugin
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - 'echo "Releasing ${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}"'
  release:
    name: "Release ${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}"
    description: "Release of the Gotify Webhooks Plugin version ${CI_COMMIT_TAG}. Compatible only with version ${GOTIFY_VERSION} of Gotify!"
    tag_name: "$CI_COMMIT_TAG"
    assets:
      links:
        - name: gotify-webhooks-linux-amd64.so
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-amd64.so"
          link_type: package
        - name: gotify-webhooks-linux-arm-7.so
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-arm-7.so"
          link_type: package
        - name: gotify-webhooks-linux-arm64.so
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-webhooks/${CI_COMMIT_TAG}_gotify${GOTIFY_VERSION}_go${GO_VERSION}/gotify-webhooks-linux-arm64.so"
          link_type: package
